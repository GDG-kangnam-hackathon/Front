// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  jobField  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  diaries   Diary[]                // 일기와의 관계 (1:N)
  recommendations Recommendation[] // 진로 추천과의 관계 (1:N)
}

model Diary {
  id           String   @id @default(uuid())
  userId       String   
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      String
  emotionType  String   
  emotionScore Int      
  reason       String?  
  date         DateTime

  diaryRecommendations DiaryRecommendations[]
}

model Recommendation {
  id               String   @id @default(uuid())
  userId           String 
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendedSectors RecommendationSector[] 

  diaryRecommendations DiaryRecommendations[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model DiaryRecommendations {
  diaryId          String
  recommendationId String
  diary            Diary         @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@id([diaryId, recommendationId])
}

model RecommendationSector {
  id           String   @id @default(uuid())
  recommendationId String 
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  sectorName   String   // 직업 계통 이름 (예: 이공계, 인문계 등)
  fitPercentage Float   // 해당 계통의 적합도 백분율 (0~100)
  reasoning    String   // 추천 근거
  recommendedJobs RecommendationJob[] // 추천된 직업 리스트와의 관계 (1:N)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RecommendationJob {
  id           String   @id @default(uuid())
  sectorId     String   
  sector       RecommendationSector @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  jobName      String   // 추천된 직업 이름 (예: 소프트웨어 엔지니어)
  jobDescription String? // 직업 설명 (Optional)
  jobImage     String?  // 직업 예시 이미지
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
